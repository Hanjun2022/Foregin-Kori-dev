plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.4'
	id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
    id 'org.sonarqube' version '5.1.0.4882'
}

group = 'com.foreigner'
version = '0.0.1-SNAPSHOT'

java {
	toolchain { languageVersion = JavaLanguageVersion.of(17) }
}

configurations {
	compileOnly { extendsFrom annotationProcessor }
}

repositories { mavenCentral() }

ext {
	// Boot 3.5.x ↔ Cloud 2025.0.x (호환 BOM)
	set('springCloudVersion', '2025.0.0')
}

dependencies {
    // --- Spring ---
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-logging'
    // --- DB ---
    runtimeOnly   'org.postgresql:postgresql'

    // --- OpenAPI(UI) ---
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.4'

    // --- OpenFeign ---
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    // x-www-form-urlencoded 인코딩 (필수)
    implementation 'io.github.openfeign.form:feign-form:3.8.0'
    implementation 'io.github.openfeign.form:feign-form-spring:3.8.0'

    // --- BouncyCastle ---
    implementation 'org.bouncycastle:bcpkix-jdk15on:1.70'
    implementation 'org.bouncycastle:bcprov-jdk15on:1.70'

    // --- JWT (권장: jackson 모듈 포함) ---
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly   'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly   'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // --- Lombok / Test ---
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.mockito:mockito-inline:5.2.0'
    testImplementation "org.junit.jupiter:junit-jupiter:5.10.3"
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // --- QueryDSL (Jakarta) ---
    implementation "com.querydsl:querydsl-core:5.1.0"
    implementation "com.querydsl:querydsl-jpa:5.1.0:jakarta"
    annotationProcessor "com.querydsl:querydsl-apt:5.1.0:jakarta"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // --- Config Processor ---
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

    // --- OAuth2 Resource Server ---
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'

    // --- AWS SDK v2 ---
    implementation 'software.amazon.awssdk:s3:2.25.39'
    implementation 'software.amazon.awssdk:auth:2.25.39'
    implementation 'software.amazon.awssdk:regions:2.25.39'

    // --- GCP / Firebase ---
    implementation 'com.google.cloud:google-cloud-translate:2.38.0'
    implementation 'com.google.firebase:firebase-admin:9.2.0'

    // --- Jackson ---
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    implementation 'com.fasterxml.jackson.core:jackson-databind'

    // --- Cache ---
    implementation 'com.github.ben-manes.caffeine:caffeine:3.1.8'

    // --- Resilience4j ---
    implementation "io.github.resilience4j:resilience4j-spring-boot3:2.2.0"
    implementation "io.github.resilience4j:resilience4j-retry:2.2.0"

    // --- Observability / Logging ---
    implementation 'io.micrometer:micrometer-registry-prometheus'
    implementation "io.micrometer:micrometer-tracing-bridge-brave"
    implementation "org.codehaus.janino:janino:3.1.12"

    implementation("org.flywaydb:flyway-core")
    implementation("org.flywaydb:flyway-database-postgresql")
}



dependencyManagement {
	imports {
		// ★ Cloud BOM 반드시 포함 (없으면 @FeignClient 인식 안 됨)
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

test {
	jvmArgs += ["-XX:+EnableDynamicAgentLoading"]
}

jacoco {
    toolVersion = "0.8.12" // 최신권장
}
tasks.jacocoTestReport {
    dependsOn tasks.test
    reports {
        xml.required.set(true)   // SonarQube에서 필요
        html.required.set(true)
        csv.required.set(false)
    }
}
tasks.named('jacocoTestCoverageVerification', JacocoCoverageVerification) {
    dependsOn tasks.jacocoTestReport
    violationRules {
        rule {
            element = 'BUNDLE'
            limit {
                counter = 'LINE'
                value   = 'COVEREDRATIO'
                minimum = 0.80
            }
        }
    }
}
tasks.check {
    dependsOn tasks.named('jacocoTestCoverageVerification')
}

sonarqube {
    properties {
        property "sonar.organization", "swyp-foreigner"
        property "sonar.projectKey", "SWYP-foreigner_Kori_Be"
        property "sonar.projectName", "Kori_Be"
        property "sonar.host.url", System.getenv("SONAR_HOST_URL") ?: "https://sonarcloud.io"

        if (System.getenv("SONAR_TOKEN") != null) {
            property "sonar.token", System.getenv("SONAR_TOKEN")   // 권장
            property "sonar.login", System.getenv("SONAR_TOKEN")   // 호환
        }

        property "sonar.java.binaries", file("${buildDir}/classes").absolutePath
        property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"

        // ✅ 로컬=false, GitHub Actions(CI)=true
        property "sonar.qualitygate.wait", (System.getenv("CI") == "true").toString()
    }
}

/** 서버 기동 전 프리플라이트(테스트→커버리지→체크) */
tasks.register('preflight') {
    group = "verification"
    description = "Run tests, coverage and verification before starting server."
    dependsOn tasks.clean, tasks.test, tasks.jacocoTestReport, tasks.check
}